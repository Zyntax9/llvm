= sycl_ext_oneapi_weak_object

:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en
:dpcpp: pass:[DPC++]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}


== Notice

[%hardbreaks]
Copyright (C) 2022-2022 Intel Corporation.  All rights reserved.

Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are trademarks
of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc. used by
permission by Khronos.


== Contact

To report problems with this extension, please open a new issue at:

https://github.com/intel/llvm/issues


== Dependencies

This extension is written against the SYCL 2020 revision 5 specification.  All
references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision.


== Status

This extension is implemented and fully supported by {dpcpp}.


== Overview

_Provide a brief overview of the extension here and explain the motivation if
appropriate.  This is also a good place to show an example usage, but there is
no need to exhaustively show all aspects of your extension.  Those details
should be explained in the sections that follow.  This section is just an
overview to introduce your readers to your extension._

_Note that text should be wrapped at 80 columns as shown in this template.
Extensions use AsciiDoc markup language (like this template).  If you need help
with AsciiDoc syntax, see
https://docs.asciidoctor.org/asciidoc/latest[the manual]._

_GitHub understands most AsciiDoc syntax, so files with the `.asciidoc`
extension are rendered nicely into HTML.  Occasionally, you will find an
AsciiDoc feature that GitHub does not understand, though, so you should check
that GitHub renders your extension document nicely before merging it.  If you
find a feature that GitHub does not understand, *do not use it*.  We expect
users to read these specifications directly in the GitHub UI, so make sure that
your specification is nicely formatted when viewed this way._

[source]
----
namespace sycl {
namespace ext {
namespace oneapi {

template <typename SYCLObjT>
class weak_object {
public:
  using object_type = SYCLObjT;

  constexpr weak_object() noexcept;
  weak_object(const SYCLObjT &SYCLObj) noexcept;
  weak_object(const weak_object &Other) noexcept;
  weak_object(weak_object &&Other) noexcept;

  weak_object &operator=(const SYCLObjT &SYCLObj) noexcept;
  weak_object &operator=(const weak_object &Other) noexcept;
  weak_object &operator=(weak_object &&Other) noexcept;

  void reset() noexcept;
  void swap(weak_object &Other) noexcept;

  bool expired() const noexcept;
  std::optional<SYCLObjT> try_lock() const noexcept;
  SYCLObjT lock() const noexcept;

  bool owner_before(const weak_object &Other) const noexcept;
  bool owner_before(const SYCLObjT &Other) const noexcept;
};

} // namespace oneapi
} // namespace ext
} // namespace oneapi

----


== Specification

=== Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification.  An implementation supporting this extension must predefine the
macro `SYCL_EXT_ONEAPI_WEAK_OBJECT` to one of the values defined in the table
below.  Applications can test for the existence of this macro to determine if
the implementation supports this feature, or applications can test the macro's
value to determine which of the extension's features the implementation
supports.

[%header,cols="1,5"]
|===
|Value
|Description

|1
|Initial version of this extension.
|===


=== More sections at your discretion

_Your extension specification will certainly have more sections which describe
the APIs of your extension.  Define these sections as you see fit._

_As a general rule, do not describe *how* you will change the core SYCL
specification.  For example, there is no need to say something like "Add the
following paragraph to section 4.6.7 of the core SYCL specification ..."
Instead, just describe the semantics and APIs of the extension itself.  We will
figure out later how to change the core SYCL specification if the extension is
adopted._

_There may be times when an extension adds a new member function to an existing
SYCL class or a new enumerator to an existing SYCL enumeration.  In cases like
these, say something like:_

> This extension adds the following new member function to the SYCL `queue`
> class:
>
> ```
> class queue {
>   void ext_oneapi_myfunction();
> };
> ```

_Avoid unnecessary duplication of core SYCL APIs.  For example, there is no
need to list the existing member functions in `queue` if your extension adds a
new member function.  Duplication like this can be troublesome if something in
the core SYCL specification changes later._


== Implementation notes

This non-normative section provides information about one possible
implementation of this extension.  It is not part of the specification of the
extension's API.

_This section is not normally needed, but occasionally a "proposed" extension
will contains some notes about the intended implementation.  If so, add this
section, and include the text in the first paragraph above indicating that the
section is non-normative.  Follow that paragraph with whatever implementation
notes you think are necessary.  Usually, this section will be removed by the
time the extension is implemented, and a more detailed {dpcpp} design document
will be written instead._


== Issues

_Sometimes there will be unresolved issues in a "proposed" extension.  If this
is the case, add an "Issues" section towards the end of the document, and list
each issue._
